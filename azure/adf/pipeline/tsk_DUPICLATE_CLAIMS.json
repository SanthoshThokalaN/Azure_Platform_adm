{
	"name": "tsk_DUPICLATE_CLAIMS",
	"properties": {
		"activities": [
			{
				"name": "Stage Duplicate Claims Report Temp",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": {
							"value": "@concat('SELECT \nDISTINCT clm.FCLTY_CD,\nclm.clm_num,\nb.acct_nbr as mem_id,\nclm.oper_id,\nprovidertin.tin,\nbill.bil_ln_num,\nclm.dt_cmpltd,\nclm.assgn_adj_amt,\nbill.ben_amt,\nclm.srv_from_dt,\nclm.srv_to_dt,\nbill.cpt_cd,\nbill.proc_mod1,\nbill.proc_mod2,\nbill.proc_mod3,\nbill.rend_prv_npi,\nobp.prov_npi,\nbill.chrg_amt,\nbill.partb_ded_amt,\nprofcharge.coins_amt,\npat.pat_para_num,\nclm.inst_prof_ind,\nclm.clh_trk_id,\nclm.medcr_clm_ctl_nbr,\nclm.doc_ctl_nbr,\nclm.clm_recpt_dt,\nclm.clm_stat,\nclm.clm_src_cd\nFROM ',pipeline().parameters.p_fox_schema,'.clm_hist clm\nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.bil_ln_hist2 bill        \n  ON clm.ch_key = bill.ch_key \nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.prof_chrg profCharge \n  ON clm.ch_key = profCharge.ch_key AND bill.bil_ln_num = profCharge.ln_num \nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.orig_bil_prov obp \n  ON clm.ch_key = obp.ch_key \nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.acct_info b        \n  ON clm.acct_info_key = b.acct_info_key \nLEFt JOIN ',pipeline().parameters.p_fox_schema,'.prov provider \n  ON clm.assgn_prv_key = provider.prov_id\nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.prov_addr providerAddress        \n  ON provider.prov_partn_key = providerAddress.prov_partn_key \n  AND NVL(providerAddress.prov_addr_stop_dt,''31-Dec-9999'') = to_date(''31-Dec-9999'', ''dd-Mon-yyyy'')\nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.tin providerTIN\n  ON provider.tin_id = providerTIN.tin_id \nLEFT JOIN ',pipeline().parameters.p_fox_schema,'.PAT_PARA2 pat        \n  ON clm.ch_key = pat.ch_key \nWHERE \n  clm.dt_cmpltd >= TO_TIMESTAMP(to_char(sysdate ,''yyyy-mm-dd'')||'' ''|| ''00:00:00'',''YYYY-MM-DD HH24:MI:SS.FF'')\n        AND clm.dt_cmpltd < TO_TIMESTAMP(to_char(sysdate ,''yyyy-mm-dd'')||'' ''|| ''23:59:59.809818811'',''YYYY-MM-DD HH24:MI:SS.FF'') \n  AND clm.assgn_adj_amt = ''0''        \n  AND clm.clm_stat <> ''S''  \n  AND bill.ben_amt <> ''0''\n  AND clm.clm_src_cd <> ''CMS''')",
							"type": "Expression"
						},
						"partitionOption": "None",
						"convertDecimalToInteger": false,
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"maxRowsPerFile": 100000,
							"fileNamePrefix": "duplicate_claims_report_temp",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_ora_fox",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_ablob_on_prem_db_to_sf",
						"type": "DatasetReference",
						"parameters": {
							"p_source_name": "fox",
							"p_table_name": "duplicate_claims_report_temp",
							"p_env": {
								"value": "@pipeline().globalParameters.par_env",
								"type": "Expression"
							},
							"p_hotstore_endpoint": {
								"value": "@pipeline().globalParameters.par_blob_hotstore_endpoint",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Delete Staged Files Duplicate Claims Report Temp",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Load Duplicate Claims Report Temp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_ablob_on_prem_db_to_sf",
						"type": "DatasetReference",
						"parameters": {
							"p_source_name": "fox",
							"p_table_name": "duplicate_claims_report_temp",
							"p_env": {
								"value": "@pipeline().globalParameters.par_env",
								"type": "Expression"
							},
							"p_hotstore_endpoint": {
								"value": "@pipeline().globalParameters.par_blob_hotstore_endpoint",
								"type": "Expression"
							}
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"wildcardFileName": "*.*",
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Truncate Duplicate Claims Report Temp",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Stage Duplicate Claims Report Temp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_sf_isdc",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_sf_acct": {
							"value": "@pipeline().globalParameters.par_sf_acct",
							"type": "Expression"
						},
						"par_sf_user": {
							"value": "@pipeline().globalParameters.par_sf_user",
							"type": "Expression"
						},
						"par_sf_db": {
							"value": "@pipeline().globalParameters.par_sf_db",
							"type": "Expression"
						},
						"par_sf_wh": {
							"value": "@pipeline().globalParameters.par_sf_wh",
							"type": "Expression"
						},
						"par_sf_role": {
							"value": "@pipeline().globalParameters.par_sf_role",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PIPELINE_ID",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "PIPELINE_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "DB_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline().globalParameters.par_sf_db",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": {
								"value": "@concat('TRUNCATE TABLE ', pipeline().parameters.p_lz_fox_schema, '.DUPLICATE_CLAIMS_REPORT_TEMP;')",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load Duplicate Claims Report Temp",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Truncate Duplicate Claims Report Temp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_sf_isdc",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_sf_acct": {
							"value": "@pipeline().globalParameters.par_sf_acct",
							"type": "Expression"
						},
						"par_sf_user": {
							"value": "@pipeline().globalParameters.par_sf_user",
							"type": "Expression"
						},
						"par_sf_db": {
							"value": "@pipeline().globalParameters.par_sf_db",
							"type": "Expression"
						},
						"par_sf_wh": {
							"value": "@pipeline().globalParameters.par_sf_wh",
							"type": "Expression"
						},
						"par_sf_role": {
							"value": "@pipeline().globalParameters.par_sf_role",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PIPELINE_ID",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "PIPELINE_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "SUB_PROCESS_NAME",
									"type": "String",
									"value": "DUPLICATE_CLAIMS_REPORT_TEMP",
									"direction": "Input"
								},
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": {
										"value": "@substring(pipeline()?.TriggeredByPipelineName,3,add(length(pipeline()?.TriggeredByPipelineName), -3))",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "UTIL",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.p_util_schema",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "DATAFACTORY",
									"type": "String",
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "SET PIPELINE_ID = ?;\r\nSET PIPELINE_NAME = ?;\r\nSET SUB_PROCESS_NAME = ?;\r\nSET PROCESS_NAME = ?;\r\nSET UTIL = ?;\r\nSET DATAFACTORY = ?;\r\nSET PROGRAM_LIST = $UTIL||'.PROGRAM_LIST';\r\nSET PROCESS_LIST = $UTIL||'.PROCESS_LIST';\r\nEXECUTE IMMEDIATE\r\n$$\r\nDECLARE\r\nv_OBJECT_DB VARCHAR;\r\nv_OBJECT_SCHEMA VARCHAR;\r\nv_OBJECT_NAME VARCHAR; \r\nv_OBJECT_SIGNATURE VARCHAR;\r\nv_STMT VARCHAR;\r\nBEGIN\r\n----------Get the meta data of the procedure and run it---------------------\r\nSELECT \r\nOBJECT_DB, \r\nOBJECT_SCHEMA, \r\nOBJECT_NAME, \r\nOBJECT_SIGNATURE\r\nINTO \r\n:v_OBJECT_DB, \r\n:v_OBJECT_SCHEMA, \r\n:v_OBJECT_NAME, \r\n:v_OBJECT_SIGNATURE\r\n\r\nFROM IDENTIFIER($PROGRAM_LIST) PGM JOIN IDENTIFIER($PROCESS_LIST) PRC ON PGM.PROCESS_NAME = PRC.PROCESS_NAME AND PGM.DATA_FACTORY_NAME = PRC.DATA_FACTORY_NAME AND PRC.ACTIVE_INDC = 'Y'\r\nWHERE UPPER(PGM.SUB_PROCESS_NAME) = $SUB_PROCESS_NAME AND UPPER(PGM.PROCESS_NAME) = $PROCESS_NAME AND PGM.DATA_FACTORY_NAME = $DATAFACTORY;\r\n\r\nv_STMT := 'CALL '||:v_OBJECT_DB||'.'||:v_OBJECT_SCHEMA||'.'||:v_OBJECT_NAME||:v_OBJECT_SIGNATURE;\r\n\r\nEXECUTE IMMEDIATE v_STMT;\r\n\r\nRETURN v_STMT; \r\n\r\nEND;\r\n$$\r\n\r\n;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load Duplicate Claims Report Matching",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Delete Staged Files Duplicate Claims Report Temp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_sf_isdc",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_sf_acct": {
							"value": "@pipeline().globalParameters.par_sf_acct",
							"type": "Expression"
						},
						"par_sf_user": {
							"value": "@pipeline().globalParameters.par_sf_user",
							"type": "Expression"
						},
						"par_sf_db": {
							"value": "@pipeline().globalParameters.par_sf_db",
							"type": "Expression"
						},
						"par_sf_wh": {
							"value": "@pipeline().globalParameters.par_sf_wh",
							"type": "Expression"
						},
						"par_sf_role": {
							"value": "@pipeline().globalParameters.par_sf_role",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PIPELINE_ID",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "PIPELINE_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "SUB_PROCESS_NAME",
									"type": "String",
									"value": "DUPLICATE_CLAIMS_REPORT_MATCHING",
									"direction": "Input"
								},
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": {
										"value": "@substring(pipeline()?.TriggeredByPipelineName,3,add(length(pipeline()?.TriggeredByPipelineName), -3))",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "UTIL",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.p_util_schema",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "DATAFACTORY",
									"type": "String",
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "SET PIPELINE_ID = ?;\r\nSET PIPELINE_NAME = ?;\r\nSET SUB_PROCESS_NAME = ?;\r\nSET PROCESS_NAME = ?;\r\nSET UTIL = ?;\r\nSET DATAFACTORY = ?;\r\nSET PROGRAM_LIST = $UTIL||'.PROGRAM_LIST';\r\nSET PROCESS_LIST = $UTIL||'.PROCESS_LIST';\r\nEXECUTE IMMEDIATE\r\n$$\r\nDECLARE\r\nv_OBJECT_DB VARCHAR;\r\nv_OBJECT_SCHEMA VARCHAR;\r\nv_OBJECT_NAME VARCHAR; \r\nv_OBJECT_SIGNATURE VARCHAR;\r\nv_STMT VARCHAR;\r\nBEGIN\r\n----------Get the meta data of the procedure and run it---------------------\r\nSELECT \r\nOBJECT_DB, \r\nOBJECT_SCHEMA, \r\nOBJECT_NAME, \r\nOBJECT_SIGNATURE\r\nINTO \r\n:v_OBJECT_DB, \r\n:v_OBJECT_SCHEMA, \r\n:v_OBJECT_NAME, \r\n:v_OBJECT_SIGNATURE\r\n\r\nFROM IDENTIFIER($PROGRAM_LIST) PGM JOIN IDENTIFIER($PROCESS_LIST) PRC ON PGM.PROCESS_NAME = PRC.PROCESS_NAME AND PGM.DATA_FACTORY_NAME = PRC.DATA_FACTORY_NAME AND PRC.ACTIVE_INDC = 'Y'\r\nWHERE UPPER(PGM.SUB_PROCESS_NAME) = $SUB_PROCESS_NAME AND UPPER(PGM.PROCESS_NAME) = $PROCESS_NAME AND PGM.DATA_FACTORY_NAME = $DATAFACTORY;\r\n\r\nv_STMT := 'CALL '||:v_OBJECT_DB||'.'||:v_OBJECT_SCHEMA||'.'||:v_OBJECT_NAME||:v_OBJECT_SIGNATURE;\r\n\r\nEXECUTE IMMEDIATE v_STMT;\r\n\r\nRETURN v_STMT; \r\n\r\nEND;\r\n$$\r\n\r\n;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Get Payer Clm Ctrl Num",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Duplicate Claims Report Matching",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat('\n\n\nselect \nCONCAT(''('',LISTAGG(CONCAT('''''''', payer_clm_ctrl_num, '''''''' ), '',''), '')'') AS payer_clm_ctrl_num\nfrom \n(\nselect ''0'' AS payer_clm_ctrl_num\nUNION\nselect distinct payer_clm_ctrl_num\nfrom ', pipeline().parameters.p_lz_fox_schema\n, '.DUPLICATE_CLAIMS_REPORT_MATCHING where payer_clm_ctrl_num <> '''' limit 1000\n)\n\n')",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "ds_sf_isdc",
						"type": "DatasetReference",
						"parameters": {
							"par_sf_acct": {
								"value": "@pipeline().globalParameters.par_sf_acct",
								"type": "Expression"
							},
							"par_sf_db": {
								"value": "@pipeline().globalParameters.par_sf_db",
								"type": "Expression"
							},
							"par_sf_user": {
								"value": "@pipeline().globalParameters.par_sf_user",
								"type": "Expression"
							},
							"par_sf_wh": {
								"value": "@pipeline().globalParameters.par_sf_wh",
								"type": "Expression"
							},
							"par_sf_role": {
								"value": "@pipeline().globalParameters.par_sf_role",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Stage Duplicate Claims Report Data After Match",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get Clh Trk Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": {
							"value": "@concat('SELECT DISTINCT clm.fclty_cd,\nclm.clm_num,\nb.acct_nbr as mem_id,\nclm.dt_cmpltd,\nclm.assgn_adj_amt,\nbill.ben_amt,\nclm.srv_from_dt,\nclm.srv_to_dt,\nbill.cpt_cd,\nbill.proc_mod1,\nbill.proc_mod2,\nbill.proc_mod3,\nbill.rend_prv_npi,\nobp.prov_npi,\nbill.chrg_amt,\nbill.partb_ded_amt,\nprofcharge.coins_amt,\nclm.inst_prof_ind,\nclm.clh_trk_id,\nclm.medcr_clm_ctl_nbr,\nclm.doc_ctl_nbr,\nclm.clm_recpt_dt,\nclm.clm_stat\nFROM ', pipeline().parameters.p_fox_schema, '.clm_hist clm\nJOIN ', pipeline().parameters.p_fox_schema, '.bil_ln_hist2 bill\n  ON clm.ch_key = bill.ch_key\nJOIN ', pipeline().parameters.p_fox_schema, '.prof_chrg profCharge\n  ON clm.ch_key=profCharge.ch_key\n  AND bill.bil_ln_num = profCharge.ln_num\nJOIN ', pipeline().parameters.p_fox_schema, '.orig_bil_prov  obp\n    ON clm.ch_key=obp.ch_key\nJOIN ', pipeline().parameters.p_fox_schema, '.acct_info b\n  ON clm.acct_info_key = b.acct_info_key\n\n\nWHERE clm.dt_cmpltd < TO_TIMESTAMP(to_char(sysdate,''yyyy-mm-dd'')||'' ''|| ''00:00:00'',''YYYY-MM-DD HH24:MI:SS.FF'') \n\n\n\n\n AND ( clm.medcr_clm_ctl_nbr IN ', \n\nactivity('Get Payer Clm Ctrl Num').output.firstRow.payer_clm_ctrl_num, ' OR clm.clh_trk_id IN ',  activity('Get Clh Trk Id').output.firstRow.clh_trk_id, ' )'\n)",
							"type": "Expression"
						},
						"partitionOption": "None",
						"convertDecimalToInteger": false,
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"maxRowsPerFile": 100000,
							"fileNamePrefix": "duplicate_claims_report_data_after_match",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_ora_fox",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_ablob_on_prem_db_to_sf",
						"type": "DatasetReference",
						"parameters": {
							"p_source_name": "fox",
							"p_table_name": "duplicate_claims_report_data_after_match",
							"p_env": {
								"value": "@pipeline().globalParameters.par_env",
								"type": "Expression"
							},
							"p_hotstore_endpoint": {
								"value": "@pipeline().globalParameters.par_blob_hotstore_endpoint",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Truncate Duplicate Claims Report Data After Match",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Stage Duplicate Claims Report Data After Match",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_sf_isdc",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_sf_acct": {
							"value": "@pipeline().globalParameters.par_sf_acct",
							"type": "Expression"
						},
						"par_sf_user": {
							"value": "@pipeline().globalParameters.par_sf_user",
							"type": "Expression"
						},
						"par_sf_db": {
							"value": "@pipeline().globalParameters.par_sf_db",
							"type": "Expression"
						},
						"par_sf_wh": {
							"value": "@pipeline().globalParameters.par_sf_wh",
							"type": "Expression"
						},
						"par_sf_role": {
							"value": "@pipeline().globalParameters.par_sf_role",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PIPELINE_ID",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "PIPELINE_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": {
								"value": "@concat('TRUNCATE TABLE ', pipeline().parameters.p_lz_fox_schema, '.DUPLICATE_CLAIMS_REPORT_DATA_AFTER_MATCH;')",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load  Duplicate Claims Report Data After Match",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Truncate Duplicate Claims Report Data After Match",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_sf_isdc",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_sf_acct": {
							"value": "@pipeline().globalParameters.par_sf_acct",
							"type": "Expression"
						},
						"par_sf_user": {
							"value": "@pipeline().globalParameters.par_sf_user",
							"type": "Expression"
						},
						"par_sf_db": {
							"value": "@pipeline().globalParameters.par_sf_db",
							"type": "Expression"
						},
						"par_sf_wh": {
							"value": "@pipeline().globalParameters.par_sf_wh",
							"type": "Expression"
						},
						"par_sf_role": {
							"value": "@pipeline().globalParameters.par_sf_role",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PIPELINE_ID",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "PIPELINE_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "SUB_PROCESS_NAME",
									"type": "String",
									"value": "DUPLICATE_CLAIMS_REPORT_DATA_AFTER_MATCH",
									"direction": "Input"
								},
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": {
										"value": "@substring(pipeline()?.TriggeredByPipelineName,3,add(length(pipeline()?.TriggeredByPipelineName), -3))",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "UTIL",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.p_util_schema",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "DATAFACTORY",
									"type": "String",
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "SET PIPELINE_ID = ?;\r\nSET PIPELINE_NAME = ?;\r\nSET SUB_PROCESS_NAME = ?;\r\nSET PROCESS_NAME = ?;\r\nSET UTIL = ?;\r\nSET DATAFACTORY = ?;\r\nSET PROGRAM_LIST = $UTIL||'.PROGRAM_LIST';\r\nSET PROCESS_LIST = $UTIL||'.PROCESS_LIST';\r\nEXECUTE IMMEDIATE\r\n$$\r\nDECLARE\r\nv_OBJECT_DB VARCHAR;\r\nv_OBJECT_SCHEMA VARCHAR;\r\nv_OBJECT_NAME VARCHAR; \r\nv_OBJECT_SIGNATURE VARCHAR;\r\nv_STMT VARCHAR;\r\nBEGIN\r\n----------Get the meta data of the procedure and run it---------------------\r\nSELECT \r\nOBJECT_DB, \r\nOBJECT_SCHEMA, \r\nOBJECT_NAME, \r\nOBJECT_SIGNATURE\r\nINTO \r\n:v_OBJECT_DB, \r\n:v_OBJECT_SCHEMA, \r\n:v_OBJECT_NAME, \r\n:v_OBJECT_SIGNATURE\r\n\r\nFROM IDENTIFIER($PROGRAM_LIST) PGM JOIN IDENTIFIER($PROCESS_LIST) PRC ON PGM.PROCESS_NAME = PRC.PROCESS_NAME AND PGM.DATA_FACTORY_NAME = PRC.DATA_FACTORY_NAME AND PRC.ACTIVE_INDC = 'Y'\r\nWHERE UPPER(PGM.SUB_PROCESS_NAME) = $SUB_PROCESS_NAME AND UPPER(PGM.PROCESS_NAME) = $PROCESS_NAME AND PGM.DATA_FACTORY_NAME = $DATAFACTORY;\r\n\r\nv_STMT := 'CALL '||:v_OBJECT_DB||'.'||:v_OBJECT_SCHEMA||'.'||:v_OBJECT_NAME||:v_OBJECT_SIGNATURE;\r\n\r\nEXECUTE IMMEDIATE v_STMT;\r\n\r\nRETURN v_STMT; \r\n\r\nEND;\r\n$$\r\n\r\n;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Delete Staged Files  Dup Claims Report Data After Match",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Load  Duplicate Claims Report Data After Match",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_ablob_on_prem_db_to_sf",
						"type": "DatasetReference",
						"parameters": {
							"p_source_name": "fox",
							"p_table_name": "duplicate_claims_report_data_after_match",
							"p_env": {
								"value": "@pipeline().globalParameters.par_env",
								"type": "Expression"
							},
							"p_hotstore_endpoint": {
								"value": "@pipeline().globalParameters.par_blob_hotstore_endpoint",
								"type": "Expression"
							}
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"wildcardFileName": "*.*",
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Get Clh Trk Id",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Payer Clm Ctrl Num",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 300,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat('\n\n\nselect \nCONCAT(''('',LISTAGG(CONCAT('''''''', clh_trk_id, '''''''' ), '',''), '')'') AS clh_trk_id\nfrom \n(\nselect ''0'' AS clh_trk_id\nUNION\nselect distinct clh_trk_id\nfrom ', pipeline().parameters.p_lz_fox_schema\n, '.DUPLICATE_CLAIMS_REPORT_MATCHING where clh_trk_id is not null limit 1000\n)\n\n')",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "ds_sf_isdc",
						"type": "DatasetReference",
						"parameters": {
							"par_sf_acct": {
								"value": "@pipeline().globalParameters.par_sf_acct",
								"type": "Expression"
							},
							"par_sf_db": {
								"value": "@pipeline().globalParameters.par_sf_db",
								"type": "Expression"
							},
							"par_sf_user": {
								"value": "@pipeline().globalParameters.par_sf_user",
								"type": "Expression"
							},
							"par_sf_wh": {
								"value": "@pipeline().globalParameters.par_sf_wh",
								"type": "Expression"
							},
							"par_sf_role": {
								"value": "@pipeline().globalParameters.par_sf_role",
								"type": "Expression"
							}
						}
					}
				}
			}
		],
		"parameters": {
			"p_lz_fox_schema": {
				"type": "string"
			},
			"p_util_schema": {
				"type": "string"
			},
			"p_fox_schema": {
				"type": "string"
			}
		},
		"folder": {
			"name": "PRE_CLM/Tasks"
		},
		"annotations": []
	}
}