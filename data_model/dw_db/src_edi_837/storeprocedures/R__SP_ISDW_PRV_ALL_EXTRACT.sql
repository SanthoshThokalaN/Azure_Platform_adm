USE SCHEMA SRC_EDI_837;

CREATE OR REPLACE PROCEDURE SP_ISDW_PRV_ALL_EXTRACT("PIPELINE_ID" VARCHAR(16777216), "PIPELINE_NAME" VARCHAR(16777216), "DB_NAME" VARCHAR(16777216), "UTIL_SC" VARCHAR(16777216), "TGT_SC" VARCHAR(16777216), "SRC_EDI_837_SC" VARCHAR(16777216), "SRC_FOX_SC" VARCHAR(16777216), "WH" VARCHAR(16777216), "STAGE_NAME" VARCHAR(16777216), "CURR_DATE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS '
DECLARE

V_CURRENT_DATE   DATE := COALESCE(TO_DATE(:CURR_DATE), CURRENT_DATE());

V_SP_PROCESS_RUN_LOGS_DTL  VARCHAR := :DB_NAME||''.''||COALESCE(:UTIL_SC, ''UTIL'')||''.SP_PROCESS_RUN_LOGS_DTL'';

V_PROCESS_NAME      VARCHAR DEFAULT ''ISDW_PRV_ALL_EXTRACT'';

V_SUB_PROCESS_NAME  VARCHAR DEFAULT ''ISDW_PRV_ALL_EXTRACT'';

V_STEP             VARCHAR;

V_STEP_NAME        VARCHAR;

V_START_TIME       VARCHAR;

V_END_TIME         VARCHAR;

V_ROWS_PARSED       INTEGER;

V_ROWS_LOADED       INTEGER;

V_MESSAGE          VARCHAR;

V_LAST_QUERY_ID    VARCHAR;

V_TMP_ISDW_PROF_PRV_ALL_STG   VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_ISDW_PROF_PRV_ALL_STG'';  
V_ISDW_PROF_PRV_ALL  VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.ISDW_PROF_PRV_ALL''; 
V_TMP_ISDW_INST_PRV_ALL_STG   VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_ISDW_INST_PRV_ALL_STG'';  
V_ISDW_INST_PRV_ALL  VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.ISDW_INST_PRV_ALL''; 
V_INST_CLAIM_PART             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.INST_CLAIM_PART''; 
V_PROF_CLAIM_PART             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.PROF_CLAIM_PART'';
V_INST_PROVIDER_ALL             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.INST_PROVIDER_ALL''; 
V_PROF_PROVIDER_ALL             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.PROF_PROVIDER_ALL'';  
V_CH_VIEW             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_FOX_SC,''SRC_FOX_SC'') || ''.CH_VIEW''; 


V_STAGE_QUERY  VARCHAR;


BEGIN

EXECUTE IMMEDIATE ''USE WAREHOUSE ''||:WH;

ALTER SESSION SET TIMEZONE = ''America/Chicago'';

V_STEP := ''STEP1'';

V_STEP_NAME := ''Load V_TMP_ISDW_PROF_PRV_ALL_STG''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_ISDW_PROF_PRV_ALL_STG) AS 

SELECT DISTINCT
PRVALL.APP_SENDER_CODE ,
PRVALL.APP_RECIEVER_CODE ,
PRVALL.GRP_CONTROL_NO ,
PRVALL.TRANCACTSET_CNTL_NO ,
PRVALL.IMPL_CONVENTION_REFER ,
PRVALL.TRANSACTSET_PURPOSE_CODE ,
PRVALL.BATCH_CNTL_NO ,
PRVALL.TRANSACTSET_CREATE_TIME ,
PRVALL.TRANSACT_TYPE_CODE ,
PRVALL.PROVIDER_HL_NO ,
PRVALL.SUBSCRIBER_HL_NO ,
PRVALL.PAYER_HL_NO ,
PRVALL.CLAIM_ID ,
DB2.CLM_NUM ,
PRVALL.CLM_RENDERING_PRV_MAP ,
PRVALL.CLM_SUPERVISING_PRV_MAP ,
PRVALL.CLM_REFERRING_PRV_MAP ,
PRVALL.SL_SEQ_NUM ,
PRVALL.SV_RENDERING_PRV_MAP ,
PRVALL.SV_SUPERVISING_PRV_MAP ,
PRVALL.SV_REFERRING_PRV_MAP ,
PRVALL.SV_ORDERING_PRV_MAP ,
PRVALL.TRANSACTSET_CREATE_DATE,
''NULL'' AS ETL_LST_BTCH_ID ,
''NULL'' AS CREAT_BY ,
''NULL'' AS CREAT_DT ,
''NULL'' AS LST_MOD_DT ,
''NULL'' AS LST_MOD_BY
FROM IDENTIFIER(:V_PROF_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_PROF_PROVIDER_ALL) PRVALL 
    ON PRVALL.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
    AND PRVALL.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
    AND PRVALL.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE 
	AND CLM.SL_SEQ_NUM=PRVALL.SL_SEQ_NUM AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND PRVALL.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'')  AND CLM.APP_SENDER_CODE=''APTIX''
JOIN IDENTIFIER(:V_CH_VIEW) DB2 
    ON (DB2.CLM_TYPE=''P'' AND DB2.CLH_TRK_ID = CLM.NETWORK_TRACE_NUMBER
        AND DB2.CLH_TRK_ID NOT LIKE ''NULL''
        AND DB2.CLH_TRK_ID IS NOT NULL AND DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-10,:V_CURRENT_DATE)) )
		
UNION

SELECT DISTINCT
PRVALL.APP_SENDER_CODE ,
PRVALL.APP_RECIEVER_CODE ,
PRVALL.GRP_CONTROL_NO ,
PRVALL.TRANCACTSET_CNTL_NO ,
PRVALL.IMPL_CONVENTION_REFER ,
PRVALL.TRANSACTSET_PURPOSE_CODE ,
PRVALL.BATCH_CNTL_NO ,
PRVALL.TRANSACTSET_CREATE_TIME ,
PRVALL.TRANSACT_TYPE_CODE ,
PRVALL.PROVIDER_HL_NO ,
PRVALL.SUBSCRIBER_HL_NO ,
PRVALL.PAYER_HL_NO ,
PRVALL.CLAIM_ID ,
DB2.CLM_NUM ,
PRVALL.CLM_RENDERING_PRV_MAP ,
PRVALL.CLM_SUPERVISING_PRV_MAP ,
PRVALL.CLM_REFERRING_PRV_MAP ,
PRVALL.SL_SEQ_NUM ,
PRVALL.SV_RENDERING_PRV_MAP ,
PRVALL.SV_SUPERVISING_PRV_MAP ,
PRVALL.SV_REFERRING_PRV_MAP ,
PRVALL.SV_ORDERING_PRV_MAP ,
PRVALL.TRANSACTSET_CREATE_DATE,
''NULL'' AS ETL_LST_BTCH_ID ,
''NULL'' AS CREAT_BY ,
''NULL'' AS CREAT_DT ,
''NULL'' AS LST_MOD_DT ,
''NULL'' AS LST_MOD_BY
FROM IDENTIFIER(:V_PROF_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_PROF_PROVIDER_ALL) PRVALL 
    ON PRVALL.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
    AND PRVALL.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
    AND PRVALL.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE 
	AND CLM.SL_SEQ_NUM=PRVALL.SL_SEQ_NUM AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND PRVALL.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND CLM.APP_SENDER_CODE=''COBA''
JOIN IDENTIFIER(:V_CH_VIEW) DB2 
    ON ((DB2.CLM_TYPE=''P'' AND DB2.MEDICARE_CLM_CNTRL_NUM = CLM.PAYER_CLM_CTRL_NUM) AND DB2.MEDICARE_CLM_CNTRL_NUM NOT LIKE ''NULL''
        AND DB2.MEDICARE_CLM_CNTRL_NUM IS NOT NULL AND (PRVALL.XML_MD5 = CLM.XML_MD5)  AND DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-10,:V_CURRENT_DATE)) )

UNION

SELECT DISTINCT
PRVALL.APP_SENDER_CODE ,
PRVALL.APP_RECIEVER_CODE ,
PRVALL.GRP_CONTROL_NO ,
PRVALL.TRANCACTSET_CNTL_NO ,
PRVALL.IMPL_CONVENTION_REFER ,
PRVALL.TRANSACTSET_PURPOSE_CODE ,
PRVALL.BATCH_CNTL_NO ,
PRVALL.TRANSACTSET_CREATE_TIME ,
PRVALL.TRANSACT_TYPE_CODE ,
PRVALL.PROVIDER_HL_NO ,
PRVALL.SUBSCRIBER_HL_NO ,
PRVALL.PAYER_HL_NO ,
PRVALL.CLAIM_ID ,
DB2.CLM_NUM ,
PRVALL.CLM_RENDERING_PRV_MAP ,
PRVALL.CLM_SUPERVISING_PRV_MAP ,
PRVALL.CLM_REFERRING_PRV_MAP ,
PRVALL.SL_SEQ_NUM ,
PRVALL.SV_RENDERING_PRV_MAP ,
PRVALL.SV_SUPERVISING_PRV_MAP ,
PRVALL.SV_REFERRING_PRV_MAP ,
PRVALL.SV_ORDERING_PRV_MAP ,
PRVALL.TRANSACTSET_CREATE_DATE,
''NULL'' AS ETL_LST_BTCH_ID ,
''NULL'' AS CREAT_BY ,
''NULL'' AS CREAT_DT ,
''NULL'' AS LST_MOD_DT ,
''NULL'' AS LST_MOD_BY
FROM IDENTIFIER(:V_PROF_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_PROF_PROVIDER_ALL) PRVALL 
    ON PRVALL.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
    AND PRVALL.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
    AND PRVALL.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE 
	AND CLM.SL_SEQ_NUM=PRVALL.SL_SEQ_NUM AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND PRVALL.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND CLM.APP_SENDER_CODE=''EXELA''
JOIN IDENTIFIER(:V_CH_VIEW) DB2 ON (DB2.CLM_TYPE=''P'' AND DB2.DOC_CTL_NBR = TRIM(SUBSTR(SPLIT_PART(CLM.CLM_BILLING_NOTE_TEXT,'' '',2),3,12))
AND (DB2.DOC_CTL_NBR NOT LIKE ''NULL'' AND DB2.DOC_CTL_NBR IS NOT NULL)  AND DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-10,:V_CURRENT_DATE)) )	;	


V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_ISDW_PROF_PRV_ALL_STG)) ;


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;


CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   
                                 

V_STEP := ''STEP2'';

V_STEP_NAME := ''Load V_TMP_ISDW_INST_PRV_ALL_STG''; 

V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

CREATE OR REPLACE TEMPORARY TABLE IDENTIFIER(:V_TMP_ISDW_INST_PRV_ALL_STG) AS 
SELECT DISTINCT 
PRVALL.APP_SENDER_CODE ,
PRVALL.APP_RECIEVER_CODE ,
PRVALL.GRP_CONTROL_NO ,
PRVALL.TRANCACTSET_CNTL_NO ,
PRVALL.IMPL_CONVENTION_REFER ,
PRVALL.TRANSACTSET_PURPOSE_CODE ,
PRVALL.BATCH_CNTL_NO ,
PRVALL.TRANSACTSET_CREATE_TIME ,
PRVALL.TRANSACT_TYPE_CODE ,
PRVALL.CLAIM_ID ,
DB2.CLM_NUM ,
PRVALL.CLM_RENDERING_PRV_MAP ,
PRVALL.CLM_ATTENDING_PRV_MAP ,
PRVALL.CLM_REFERRING_PRV_MAP ,
PRVALL.CLM_OPERATING_PHYS_MAP ,
PRVALL.CLM_OTHER_OPERATING_PHYS_MAP ,
PRVALL.SV_LX_NUMBER ,
PRVALL.SV_RENDERING_PRV_MAP ,
PRVALL.SV_REFERRING_PRV_MAP ,
PRVALL.SV_OPERATING_PHYS_MAP ,
PRVALL.SV_OTHER_OPERATING_PHYS_MAP ,
PRVALL.TRANSACTSET_CREATE_DATE,
''NULL'' AS ETL_LST_BTCH_ID ,
''NULL'' AS CREAT_BY ,
''NULL'' AS CREAT_DT ,
''NULL'' AS LST_MOD_DT ,
''NULL'' AS LST_MOD_BY
FROM IDENTIFIER(:V_INST_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_INST_PROVIDER_ALL) PRVALL 
    ON PRVALL.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
    AND PRVALL.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
    AND PRVALL.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE 
	AND CLM.SL_SEQ_NUM=PRVALL.SV_LX_NUMBER AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND PRVALL.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'')  AND CLM.APP_SENDER_CODE=''APTIX''
JOIN IDENTIFIER(:V_CH_VIEW) DB2 
    ON (DB2.CLM_TYPE=''I'' AND DB2.CLH_TRK_ID = CLM.NETWORK_TRACE_NUMBER
        AND DB2.CLH_TRK_ID NOT LIKE ''NULL''
        AND DB2.CLH_TRK_ID IS NOT NULL AND DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-10,:V_CURRENT_DATE)) )

UNION

SELECT DISTINCT 
PRVALL.APP_SENDER_CODE ,
PRVALL.APP_RECIEVER_CODE ,
PRVALL.GRP_CONTROL_NO ,
PRVALL.TRANCACTSET_CNTL_NO ,
PRVALL.IMPL_CONVENTION_REFER ,
PRVALL.TRANSACTSET_PURPOSE_CODE ,
PRVALL.BATCH_CNTL_NO ,
PRVALL.TRANSACTSET_CREATE_TIME ,
PRVALL.TRANSACT_TYPE_CODE ,
PRVALL.CLAIM_ID ,
DB2.CLM_NUM ,
PRVALL.CLM_RENDERING_PRV_MAP ,
PRVALL.CLM_ATTENDING_PRV_MAP ,
PRVALL.CLM_REFERRING_PRV_MAP ,
PRVALL.CLM_OPERATING_PHYS_MAP ,
PRVALL.CLM_OTHER_OPERATING_PHYS_MAP ,
PRVALL.SV_LX_NUMBER ,
PRVALL.SV_RENDERING_PRV_MAP ,
PRVALL.SV_REFERRING_PRV_MAP ,
PRVALL.SV_OPERATING_PHYS_MAP ,
PRVALL.SV_OTHER_OPERATING_PHYS_MAP ,
PRVALL.TRANSACTSET_CREATE_DATE,
''NULL'' AS ETL_LST_BTCH_ID ,
''NULL'' AS CREAT_BY ,
''NULL'' AS CREAT_DT ,
''NULL'' AS LST_MOD_DT ,
''NULL'' AS LST_MOD_BY
FROM IDENTIFIER(:V_INST_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_INST_PROVIDER_ALL) PRVALL 
    ON PRVALL.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
    AND PRVALL.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
    AND PRVALL.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE 
	AND CLM.SL_SEQ_NUM=PRVALL.SV_LX_NUMBER AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND PRVALL.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') AND CLM.APP_SENDER_CODE=''EXELA''
JOIN IDENTIFIER(:V_CH_VIEW) DB2 ON (DB2.CLM_TYPE=''I'' AND DB2.DOC_CTL_NBR = TRIM(SUBSTR(SPLIT_PART(CLM.CLM_BILLING_NOTE_TEXT,'' '',2),3,12))
AND (DB2.DOC_CTL_NBR NOT LIKE ''NULL'' AND DB2.DOC_CTL_NBR IS NOT NULL)  AND DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-10,:V_CURRENT_DATE)) )	;



V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_ISDW_INST_PRV_ALL_STG)) ;


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;


CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   
                                 

V_STEP := ''STEP3'';

V_STEP_NAME := ''Generate Report for Professional''; 

V_MESSAGE   :=  ''File Generated Successfully'';

V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
   
                                 

V_STAGE_QUERY := ''COPY INTO ''||:STAGE_NAME||''/pre_clm/outbox/isdw_prv_all_extract/''||''isdw_prof_prv_all_extract_''||(select TO_VARCHAR(:V_CURRENT_DATE,''YYYYMMDD''))||''.txt''||'' FROM (

	SELECT 	* FROM 	TMP_ISDW_PROF_PRV_ALL_STG 
	
)
file_format = (type = ''''CSV'''' 
               field_delimiter = ''''|''''
			   empty_field_as_null = false
               NULL_IF = ()
               compression = None                         
               )
               
               
               
HEADER = False
OVERWRITE = True
MAX_FILE_SIZE = 4900000000
SINGLE = True''

;

execute immediate ''USE SCHEMA ''||:TGT_SC;                          
execute immediate :V_STAGE_QUERY;  


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, NULL, NULL, :V_MESSAGE, NULL, NULL);

V_STEP := ''STEP4'';

V_STEP_NAME := ''Generate Report for Institutional''; 

V_MESSAGE   :=  ''File Generated Successfully'';

V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
   
                                 

V_STAGE_QUERY := ''COPY INTO ''||:STAGE_NAME||''/pre_clm/outbox/isdw_prv_all_extract/''||''isdw_inst_prv_all_extract_''||(select TO_VARCHAR(:V_CURRENT_DATE,''YYYYMMDD''))||''.txt''||'' FROM (

	SELECT 	* FROM 	TMP_ISDW_INST_PRV_ALL_STG
	
)
file_format = (type = ''''CSV'''' 
               field_delimiter = ''''|''''
			   empty_field_as_null = false
               NULL_IF = ()
               compression = None                         
               )
               
               
               
HEADER = False
OVERWRITE = True
MAX_FILE_SIZE = 4900000000
SINGLE = True''

;

execute immediate ''USE SCHEMA ''||:TGT_SC;                          
execute immediate :V_STAGE_QUERY;  


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, NULL, NULL, :V_MESSAGE, NULL, NULL);

EXCEPTION

WHEN OTHER THEN

CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME,  :V_PROCESS_NAME, :V_SUB_PROCESS_NAME,
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''FAILED'', :V_LAST_QUERY_ID, NULL, NULL, :SQLERRM, :SQLCODE, :SQLSTATE);



RAISE;

END;

';