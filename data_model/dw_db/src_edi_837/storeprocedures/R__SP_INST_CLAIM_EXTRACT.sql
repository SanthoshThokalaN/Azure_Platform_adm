USE SCHEMA SRC_EDI_837;

CREATE OR REPLACE PROCEDURE SP_INST_CLAIM_EXTRACT("PIPELINE_ID" VARCHAR(16777216), "PIPELINE_NAME" VARCHAR(16777216), "DB_NAME" VARCHAR(16777216), "UTIL_SC" VARCHAR(16777216), "TGT_SC" VARCHAR(16777216), "SRC_EDI_837_SC" VARCHAR(16777216), "SRC_FOX_SC" VARCHAR(16777216), "WH" VARCHAR(16777216), "STAGE_NAME" VARCHAR(16777216), "CURR_DATE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS '
DECLARE

V_CURRENT_DATE   DATE := COALESCE(TO_DATE(:CURR_DATE), CURRENT_DATE());

V_SP_PROCESS_RUN_LOGS_DTL  VARCHAR := :DB_NAME||''.''||COALESCE(:UTIL_SC, ''UTIL'')||''.SP_PROCESS_RUN_LOGS_DTL'';

V_PROCESS_NAME      VARCHAR DEFAULT ''INST_CLAIM_EXTRACT'';

V_SUB_PROCESS_NAME  VARCHAR DEFAULT ''INST_CLAIM_EXTRACT'';

V_STEP             VARCHAR;

V_STEP_NAME        VARCHAR;

V_START_TIME       VARCHAR;

V_END_TIME         VARCHAR;

V_ROWS_PARSED       INTEGER;

V_ROWS_LOADED       INTEGER;

V_MESSAGE          VARCHAR;

V_LAST_QUERY_ID    VARCHAR;

V_TMP_INST_CLAIM_EXTRACT_STG   VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_INST_CLAIM_EXTRACT_STG'';  
V_INST_CLAIM_EXTRACT  VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.INST_CLAIM_EXTRACT''; 
V_TMP_HEADER				 VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_HEADER''; 
V_TMP_HEADER_LIST	 		 VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_HEADER_LIST''; 
V_TMP_TRAILER_LIST			 VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_TRAILER_LIST''; 
V_TMP_TRAILER				VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_TRAILER'';
V_Final_Data_load            VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.Final_Data_load'';

V_INST_CLAIM_PART             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.INST_CLAIM_PART''; 
V_INST_SUBSCRIBER             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_EDI_837_SC,''SRC_EDI_837'') || ''.INST_SUBSCRIBER''; 
V_CH_VIEW             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:SRC_FOX_SC,''SRC_FOX_SC'') || ''.CH_VIEW''; 


V_STAGE_QUERY  VARCHAR;


BEGIN

EXECUTE IMMEDIATE ''USE WAREHOUSE ''||:WH;

ALTER SESSION SET TIMEZONE = ''America/Chicago'';

V_STEP := ''STEP1'';

V_STEP_NAME := ''Load TMP_INST_CLAIM_EXTRACT_STG''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG) AS 

SELECT DISTINCT
''01'' AS CLAIM_RECORD_TYPE_HEADER,
''02'' AS CLAIM_RECORD_TYPE_TRAILER,
DB2.CLM_NUM AS CLAIM_NUMBER,
CLM.GRP_CONTROL_NO,
CLM.TRANCACTSET_CNTL_NO,
CLM.TRANSACTSET_CREATE_DATE,
CONCAT_WS ('''',SPLIT_PART(CLM.HEALTHCARESERVICE_LOCATION,'':'',0),SPLIT_PART(CLM.HEALTHCARESERVICE_LOCATION,'':'',3)) AS TYPE_OF_BILL,
CLM.PATIENT_STATUS_CODE AS DISCHARGE_STATUS,
SPLIT_PART(CLM.DIAGNOSIS_RELATED_GRP_INFO,'':'',2) AS DRG_CODE,
CLM.OTHER_PAYER_1_PAID_AMT AS MEDICARE_PAID_AMOUNT,
SPLIT_PART(CLM.HEALTH_CARE_CODE_INFO,'':'',2) AS PRIMARY_DIAGNOSIS_CODE,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[0],'':'',2) AS DIAGNOSIS_CODE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[1],'':'',2) AS DIAGNOSIS_CODE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[2],'':'',2) AS DIAGNOSIS_CODE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[3],'':'',2) AS DIAGNOSIS_CODE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[4],'':'',2) AS DIAGNOSIS_CODE_6,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[5],'':'',2) AS DIAGNOSIS_CODE_7,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[6],'':'',2) AS DIAGNOSIS_CODE_8,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[7],'':'',2) AS DIAGNOSIS_CODE_9,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[8],'':'',2) AS DIAGNOSIS_CODE_10,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[9],'':'',2) AS DIAGNOSIS_CODE_11,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[10],'':'',2) AS DIAGNOSIS_CODE_12,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[11],'':'',2) AS DIAGNOSIS_CODE_13,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[12],'':'',2) AS DIAGNOSIS_CODE_14,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[13],'':'',2) AS DIAGNOSIS_CODE_15,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[14],'':'',2) AS DIAGNOSIS_CODE_16,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[15],'':'',2) AS DIAGNOSIS_CODE_17,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[16],'':'',2) AS DIAGNOSIS_CODE_18,
CASE WHEN CLM.HEALTH_CARE_CODE_INFO LIKE ''ABK%'' THEN ''0'' 
WHEN CLM.HEALTH_CARE_CODE_INFO LIKE ''BK%'' THEN ''9'' END AS ICD_INDICATOR,
SPLIT_PART(CLM.PRINCIPAL_PROCEDURE_INFO,'':'',2) AS PRIMARY_PROCEDURE_CODE,
SPLIT_PART(CLM.PRINCIPAL_PROCEDURE_INFO,'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_1,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[0],'':'',2) AS PRIMARY_PROCEDURE_CODE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[0],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[1],'':'',2) AS PRIMARY_PROCEDURE_CODE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[1],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[2],'':'',2) AS PRIMARY_PROCEDURE_CODE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[2],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[3],'':'',2) AS PRIMARY_PROCEDURE_CODE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[3],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[4],'':'',2) AS PRIMARY_PROCEDURE_CODE_6,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[4],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_6,
MEM.APP_SENDER_CODE,
MEM.SUBSCRIBER_ID AS SUBSCRIBER_ID,
LPAD(CLM.SL_SEQ_NUM,3,''0'') AS SERVICE_LINE_NUMBER, -- CHECK
SUBSTR(CLM.PRODUCT_SERVICE_ID,1,4) AS REVENUE_CODE,
SPLIT_PART(CLM.PRODUCT_SERVICE_ID_QLFR,'':'',2) AS HCPCS_CODE,
CLM.SERVICE_UNIT_COUNT AS UNITS_OF_SERVICE,
CLM.LINE_ITEM_CHARGE_AMT AS SERVICE_CHARGE_AMOUNT,
TO_CHAR(DB2.CLM_RECEPT_DT::date, ''YYYYMMDD'') AS CLAIM_PROCESSED_DATE 
FROM IDENTIFIER(:V_INST_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_INST_SUBSCRIBER) MEM ON (MEM.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
                                                 AND MEM.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
                                                 AND MEM.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE)
JOIN IDENTIFIER(:V_CH_VIEW) DB2 ON (DB2.CLH_TRK_ID = CLM.NETWORK_TRACE_NUMBER
AND YEAR(TO_DATE(DB2.CLM_RECEPT_DT)) = YEAR(TO_DATE(CLM.TRANSACTSET_CREATE_DATE,''YYYYMMDD''))
AND DB2.CLH_TRK_ID NOT LIKE ''NULL'' AND DB2.CLH_TRK_ID  IS NOT NULL)
WHERE DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-7,:V_CURRENT_DATE))AND  SUBSTR(DB2.CLM_NUM,12,1)<>''0'' AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') 

UNION 

SELECT DISTINCT
''01'' AS CLAIM_RECORD_TYPE_HEADER,
''02'' AS CLAIM_RECORD_TYPE_TRAILER,
DB2.CLM_NUM AS CLAIM_NUMBER,
CLM.GRP_CONTROL_NO,
CLM.TRANCACTSET_CNTL_NO,
CLM.TRANSACTSET_CREATE_DATE,
CONCAT_WS ('''',SPLIT_PART(CLM.HEALTHCARESERVICE_LOCATION,'':'',0),SPLIT_PART(CLM.HEALTHCARESERVICE_LOCATION,'':'',3)) AS TYPE_OF_BILL,
CLM.PATIENT_STATUS_CODE AS DISCHARGE_STATUS,
SPLIT_PART(CLM.DIAGNOSIS_RELATED_GRP_INFO,'':'',2) AS DRG_CODE,
CLM.OTHER_PAYER_1_PAID_AMT AS MEDICARE_PAID_AMOUNT,
SPLIT_PART(CLM.HEALTH_CARE_CODE_INFO,'':'',2) AS PRIMARY_DIAGNOSIS_CODE,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[0],'':'',2) AS DIAGNOSIS_CODE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[1],'':'',2) AS DIAGNOSIS_CODE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[2],'':'',2) AS DIAGNOSIS_CODE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[3],'':'',2) AS DIAGNOSIS_CODE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[4],'':'',2) AS DIAGNOSIS_CODE_6,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[5],'':'',2) AS DIAGNOSIS_CODE_7,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[6],'':'',2) AS DIAGNOSIS_CODE_8,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[7],'':'',2) AS DIAGNOSIS_CODE_9,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[8],'':'',2) AS DIAGNOSIS_CODE_10,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[9],'':'',2) AS DIAGNOSIS_CODE_11,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[10],'':'',2) AS DIAGNOSIS_CODE_12,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[11],'':'',2) AS DIAGNOSIS_CODE_13,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[12],'':'',2) AS DIAGNOSIS_CODE_14,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[13],'':'',2) AS DIAGNOSIS_CODE_15,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[14],'':'',2) AS DIAGNOSIS_CODE_16,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[15],'':'',2) AS DIAGNOSIS_CODE_17,
SPLIT_PART(PARSE_JSON(CLM.OTHER_DIAGNOSIS_CD_INFO)::ARRAY[16],'':'',2) AS DIAGNOSIS_CODE_18,
CASE WHEN CLM.HEALTH_CARE_CODE_INFO LIKE ''ABK%'' THEN ''0'' 
WHEN CLM.HEALTH_CARE_CODE_INFO LIKE ''BK%'' THEN ''9'' END AS ICD_INDICATOR,
SPLIT_PART(CLM.PRINCIPAL_PROCEDURE_INFO,'':'',2) AS PRIMARY_PROCEDURE_CODE,
SPLIT_PART(CLM.PRINCIPAL_PROCEDURE_INFO,'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_1,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[0],'':'',2) AS PRIMARY_PROCEDURE_CODE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[0],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_2,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[1],'':'',2) AS PRIMARY_PROCEDURE_CODE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[1],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_3,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[2],'':'',2) AS PRIMARY_PROCEDURE_CODE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[2],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_4,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[3],'':'',2) AS PRIMARY_PROCEDURE_CODE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[3],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_5,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[4],'':'',2) AS PRIMARY_PROCEDURE_CODE_6,
SPLIT_PART(PARSE_JSON(CLM.OTHER_PROCEDURE_INFO)::ARRAY[4],'':'',4) AS PRIMARY_PROCEDURE_CODE_DATE_6,
MEM.APP_SENDER_CODE,
MEM.SUBSCRIBER_ID AS SUBSCRIBER_ID,
LPAD(CLM.SL_SEQ_NUM,3,''0'') AS SERVICE_LINE_NUMBER, -- CHECK
SUBSTR(CLM.PRODUCT_SERVICE_ID,1,4) AS REVENUE_CODE,
SPLIT_PART(CLM.PRODUCT_SERVICE_ID_QLFR,'':'',2) AS HCPCS_CODE,
CLM.SERVICE_UNIT_COUNT AS UNITS_OF_SERVICE,
CLM.LINE_ITEM_CHARGE_AMT AS SERVICE_CHARGE_AMOUNT,
CLM.TRANSACTSET_CREATE_DATE AS CLAIM_PROCESSED_DATE 
FROM IDENTIFIER(:V_INST_CLAIM_PART) CLM
JOIN IDENTIFIER(:V_INST_SUBSCRIBER) MEM ON (MEM.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
                                                 AND MEM.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
                                                 AND MEM.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE)
JOIN IDENTIFIER(:V_CH_VIEW) DB2 ON (DB2.DOC_CTL_NBR = TRIM(SUBSTR(SPLIT_PART(CLM.CLM_BILLING_NOTE_TEXT,'' '',2),3,12))
AND (CLM.APP_SENDER_CODE = ''EXELA'')
AND (DB2.DOC_CTL_NBR NOT LIKE ''NULL'' AND DB2.DOC_CTL_NBR IS NOT NULL)) 
WHERE DB2.CLM_RECEPT_DT > DATEADD(MONTH,-1,DATEADD(DAY,-7,:V_CURRENT_DATE)) AND  SUBSTR(DB2.CLM_NUM,12,1)<>''0'' AND CLM.TRANSACTSET_CREATE_DATE = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'') 
;


V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG)) ;


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;


CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   
                                 

    V_STEP := ''STEP2'';
   
   V_STEP_NAME := ''Load TMP_TRAILER''; 
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
   

INSERT INTO IDENTIFIER(:V_INST_CLAIM_EXTRACT) (
	CLAIM_RECORD_TYPE_HEADER ,
	CLAIM_RECORD_TYPE_TRAILER ,
	CLAIM_NUMBER ,
	GRP_CONTROL_NO ,
	TRANCACTSET_CNTL_NO ,
	TRANSACTSET_CREATE_DATE ,
	TYPE_OF_BILL ,
	DISCHARGE_STATUS ,
	DRG_CODE ,
	MEDICARE_PAID_AMOUNT ,
	PRIMARY_DIAGNOSIS_CODE ,
	DIAGNOSIS_CODE_2 ,
	DIAGNOSIS_CODE_3 ,
	DIAGNOSIS_CODE_4 ,
	DIAGNOSIS_CODE_5 ,
	DIAGNOSIS_CODE_6 ,
	DIAGNOSIS_CODE_7 ,
	DIAGNOSIS_CODE_8 ,
	DIAGNOSIS_CODE_9 ,
	DIAGNOSIS_CODE_10 ,
	DIAGNOSIS_CODE_11 ,
	DIAGNOSIS_CODE_12 ,
	DIAGNOSIS_CODE_13 ,
	DIAGNOSIS_CODE_14 ,
	DIAGNOSIS_CODE_15 ,
	DIAGNOSIS_CODE_16 ,
	DIAGNOSIS_CODE_17 ,
	DIAGNOSIS_CODE_18 ,
	ICD_INDICATOR ,
	PRIMARY_PROCEDURE_CODE ,
	PRIMARY_PROCEDURE_CODE_DATE_1 ,
	PRIMARY_PROCEDURE_CODE_2 ,
	PRIMARY_PROCEDURE_CODE_DATE_2 ,
	PRIMARY_PROCEDURE_CODE_3 ,
	PRIMARY_PROCEDURE_CODE_DATE_3 ,
	PRIMARY_PROCEDURE_CODE_4 ,
	PRIMARY_PROCEDURE_CODE_DATE_4 ,
	PRIMARY_PROCEDURE_CODE_5 ,
	PRIMARY_PROCEDURE_CODE_DATE_5 ,
	PRIMARY_PROCEDURE_CODE_6 ,
	PRIMARY_PROCEDURE_CODE_DATE_6 ,
	APP_SENDER_CODE ,
	SUBSCRIBER_ID ,
	SERVICE_LINE_NUMBER ,
	REVENUE_CODE ,
	HCPCS_CODE ,
	UNITS_OF_SERVICE ,
	SERVICE_CHARGE_AMOUNT ,
	CLAIM_PROCESSED_DATE 
)
select * from IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG);

V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   

   
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);
  

                                 
V_STEP := ''STEP3'';

V_STEP_NAME := ''Load TMP_Header_list''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_Header_list) AS 

select CONCAT_WS('''',claim_record_type_header,
substr(claim_number,1,11),
rpad(type_of_bill,4,'' ''),
discharge_status,
rpad(COALESCE(drg_code,'' ''),5,'' ''),
LPAD(replace(COALESCE(replace(case when POSITION(''.'' IN medicare_paid_amount)=0 then 
concat(lpad(medicare_paid_amount,10,''0''),''.00'') else concat(LPAD(SUBSTR(medicare_paid_amount,1,POSITION(''.'' IN medicare_paid_amount)-1),10,''0''),
                                                            RPAD(SUBSTR(medicare_paid_amount,POSITION(''.'' IN medicare_paid_amount)),3,''0'')) end,''.'',''''),''000000000000''),''-'',''''),12,0),
rpad(primary_diagnosis_code,8,'' ''),
rpad(COALESCE(diagnosis_code_2,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_3,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_4,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_5,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_6,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_7,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_8,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_9,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_10,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_11,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_12,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_13,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_14,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_15,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_16,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_17,'' ''),8,'' ''),
rpad(COALESCE(diagnosis_code_18,'' ''),8,'' ''),
icd_indicator,
rpad(COALESCE(primary_procedure_code,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_1,''0''),8,''0''),
rpad(COALESCE(primary_procedure_code_2,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_2,''0''),8,''0''),
rpad(COALESCE(primary_procedure_code_3,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_3,''0''),8,''0''),
rpad(COALESCE(primary_procedure_code_4,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_4,''0''),8,''0''),
rpad(COALESCE(primary_procedure_code_5,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_5,''0''),8,''0''),
rpad(COALESCE(primary_procedure_code_6,'' ''),7,'' ''),
rpad(COALESCE(primary_procedure_code_date_6,''0''),8,''0''),
claim_processed_date) AS EXTRACT from IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG) where claim_processed_date = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'')
ORDER BY substr(claim_number,1,11); 

V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_HEADER_LIST)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);
     
V_STEP := ''STEP4'';

V_STEP_NAME := ''Load TMP_Trailer_list''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_Trailer_list) AS 
select CONCAT_WS('''',claim_record_type_trailer,
substr(claim_number,1,11),
service_line_number,
revenue_code,
lpad(COALESCE(hcpcs_code,'' ''),5,'' ''),
COALESCE(replace(case when POSITION(''.'' IN units_of_service)=0 then CASE WHEN length(cast(units_of_service as string)) < 4
THEN concat(lpad(cast(units_of_service as string),4,''0''),''.000'') ELSE concat(SUBSTR(cast(units_of_service as string),-4),''.000'') END else concat(LPAD(SUBSTR(cast(units_of_service as string),1,POSITION(''.'' IN units_of_service)-1),4,''0''),RPAD(SUBSTR(cast(units_of_service as string),POSITION(''.'' IN units_of_service)),4,''0'')) end,''.'',''''),''0000000''),
COALESCE(replace(case when POSITION(''.'' IN service_charge_amount)=0 then concat(lpad(service_charge_amount,10,''0''),''.00'') else concat(LPAD(SUBSTR(service_charge_amount,1,POSITION(''.'' IN service_charge_amount)-1),10,''0''),
                                                                                                                                RPAD(SUBSTR(service_charge_amount,POSITION(''.'' IN service_charge_amount)),3,''0'')) end,''.'',''''),
         ''000000000000''),claim_processed_date) as EXTRACT
         
         
         from IDENTIFIER(:V_TMP_INST_CLAIM_EXTRACT_STG) where claim_processed_date = to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'')
		 ORDER BY substr(claim_number,1,11);



V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_TRAILER_LIST)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);
     
    V_STEP := ''STEP5'';
   
   V_STEP_NAME := ''Load TMP_HEADER''; 
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
   

   
CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_HEADER) AS  
  select (''H''||(select TO_VARCHAR(CURRENT_TIMESTAMP,''YYYYMMDDHH24MISS''))||to_char(to_date(DATEADD(DAY,-7,:V_CURRENT_DATE) ),''YYYYMMDD'')) as Extract, CURRENT_TIMESTAMP() AS ISDC_LOAD_DATE
  ;

V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_HEADER)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   

   
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);
  
  
    
    
V_STEP := ''STEP6'';
   
   V_STEP_NAME := ''Load Final data between header and trailer''; 
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
    
    
    
    
CREATE OR REPLACE TEMPORARY TABLE IDENTIFIER (:V_Final_Data_load) AS   
SELECT Extract, CURRENT_TIMESTAMP() AS ISDC_LOAD_DATE FROM  (
SELECT * FROM IDENTIFIER (:V_TMP_HEADER_LIST) UNION SELECT * FROM IDENTIFIER (:V_TMP_TRAILER_LIST));
    
    
V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_Final_Data_load)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   

   
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);   
    
    
    
    
    
    
    
    
    
    V_STEP := ''STEP7'';
   
   V_STEP_NAME := ''Load TMP_TRAILER''; 
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());
   

   
CREATE OR REPLACE TEMPORARY TABLE  IDENTIFIER(:V_TMP_TRAILER) AS  

  select (''T''||(SELECT LPAD(COUNT(*),9,0) FROM (SELECT DISTINCT(EXTRACT) FROM IDENTIFIER (:V_TMP_HEADER_LIST) ))||(SELECT LPAD(COUNT(*)+2,9,0) AS TMP_TOTAL_COUNT FROM (
SELECT * FROM IDENTIFIER (:V_TMP_HEADER_LIST) UNION SELECT * FROM IDENTIFIER (:V_TMP_TRAILER_LIST)))) AS Extract, CURRENT_TIMESTAMP() AS ISDC_LOAD_DATE
  ;

V_ROWS_LOADED := (select count(1) from IDENTIFIER(:V_TMP_TRAILER)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   

   
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);
  
  
	 
V_STEP := ''STEP8'';
   
 
V_STEP_NAME := ''Generate Report for Inst Claim Extract''; 

V_MESSAGE   :=  ''File Generated Successfully'';
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());                                 

V_STAGE_QUERY := ''COPY INTO ''||:STAGE_NAME||''/pre_clm/outbox/inst_claim_extract/''||''ODM_UCPS_NXG_SHIP_CLAIMS_''||(select TO_VARCHAR(:V_CURRENT_DATE,''YYYYMMDD''))||''_D.gz''||'' FROM (
             
             
             SELECT Extract FROM ((select * from TMP_HEADER
UNION all
	SELECT 	* FROM 	Final_Data_load 			 
UNION all
select * from TMP_TRAILER
               )
               ORDER BY ISDC_LOAD_DATE)
               
)
file_format = (type = ''''CSV'''' 
               field_delimiter = None
               compression = ''''gzip'''' 
               )
               
               
               
HEADER = False
OVERWRITE = True
MAX_FILE_SIZE = 4900000000
SINGLE = True''

;

execute immediate ''USE SCHEMA ''||:TGT_SC;                          
execute immediate :V_STAGE_QUERY;  


V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, NULL, NULL, :V_MESSAGE, NULL, NULL);



EXCEPTION

WHEN OTHER THEN

CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME,  :V_PROCESS_NAME, :V_SUB_PROCESS_NAME,
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''FAILED'', :V_LAST_QUERY_ID, NULL, NULL, :SQLERRM, :SQLCODE, :SQLSTATE);



RAISE;

END;

';
