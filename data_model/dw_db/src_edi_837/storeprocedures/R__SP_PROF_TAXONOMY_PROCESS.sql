USE SCHEMA SRC_EDI_837;
CREATE OR REPLACE PROCEDURE SP_PROF_TAXONOMY_PROCESS("PIPELINE_ID" VARCHAR(50), "PIPELINE_NAME" VARCHAR(50), "DB_NAME" VARCHAR(50), "UTIL_SC" VARCHAR(50), "LZ_ISDW_SC" VARCHAR(50), "TGT_SC" VARCHAR(50), "FOX_SC" VARCHAR(50), "WH" VARCHAR(50), "STAGE_NAME" VARCHAR(50), "CURR_DATE" VARCHAR(50))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS '
DECLARE
V_TMP_ISDW_CLMS_FILTERED       VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_ISDW_CLMS_FILTERED'';
V_CH_VIEW                      VARCHAR     := :DB_NAME || ''.'' || COALESCE(:FOX_SC,''SRC_FOX'') || ''.CH_VIEW'';
V_MED_APPROVED_AMT_STG         VARCHAR     := :DB_NAME || ''.'' || COALESCE(:LZ_ISDW_SC,''LZ_ISDW'') || ''.MED_APPROVED_AMT_STG'';
V_TMP_CLAIMS                   VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_CLAIMS'';
V_PROF_CLAIM_PART              VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.PROF_CLAIM_PART'';
V_PROF_MEMBER_TEMP             VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.PROF_MEMBER_TEMP'';
V_PROF_SUBSCRIBER              VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.PROF_SUBSCRIBER'';
V_TMP_PROVIDERS                VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_PROVIDERS'';
V_PROF_PROVIDER_ALL            VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.PROF_PROVIDER_ALL'';
V_PROF_PROVIDER                VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.PROF_PROVIDER'';
V_TMP_TAXONOMY_MISMATCH_RAW    VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TMP_TAXONOMY_MISMATCH_RAW'';
V_TAXONOMY_MISMATCH_RAW    VARCHAR     := :DB_NAME || ''.'' || COALESCE(:TGT_SC,''SRC_EDI_837'') || ''.TAXONOMY_MISMATCH_RAW'';
V_CURRENT_DATE                 DATE        := COALESCE(TO_DATE(:CURR_DATE), CURRENT_DATE());
V_SP_PROCESS_RUN_LOGS_DTL      VARCHAR     := :DB_NAME || ''.'' || COALESCE(:UTIL_SC, ''UTIL'')||''.SP_PROCESS_RUN_LOGS_DTL'';
V_PROCESS_NAME                 VARCHAR       DEFAULT ''PROF TAXONOMY'';
V_SUB_PROCESS_NAME             VARCHAR       DEFAULT ''PROF TAXONOMY MISMATCH PROCESS'';
V_STEP                         VARCHAR;
V_STEP_NAME                    VARCHAR;
V_START_TIME                   VARCHAR;
V_END_TIME                     VARCHAR;
V_ROWS_PARSED                  INTEGER;
V_ROWS_LOADED                  INTEGER;
V_MESSAGE                      VARCHAR;
V_LAST_QUERY_ID                VARCHAR;
V_STAGE_QUERY                  VARCHAR;
V_START_DATE VARCHAR ;
V_END_DATE   VARCHAR ;
V_DATEFORWINDOW  VARCHAR ;
V_MIN_UCPS_CLM_DT VARCHAR;
V_MAX_UCPS_CLM_DT VARCHAR;


BEGIN

EXECUTE IMMEDIATE ''USE WAREHOUSE ''||:WH;

V_DATEFORWINDOW := (SELECT DATEADD(DAY, -90, :V_CURRENT_DATE));

V_MIN_UCPS_CLM_DT := (SELECT COALESCE(MIN(A.CLM_RECEPT_DT),:V_CURRENT_DATE) FROM IDENTIFIER(:V_CH_VIEW) A JOIN IDENTIFIER(:V_MED_APPROVED_AMT_STG) B
 ON A.CLM_NUM = B.CLAIM_NUMBER WHERE A.CLM_RECEPT_DT >= :V_DATEFORWINDOW);
 
V_MAX_UCPS_CLM_DT := (SELECT COALESCE(MAX(A.CLM_RECEPT_DT),:V_CURRENT_DATE) FROM IDENTIFIER(:V_CH_VIEW) A JOIN IDENTIFIER(:V_MED_APPROVED_AMT_STG) B
 ON A.CLM_NUM = B.CLAIM_NUMBER WHERE A.CLM_RECEPT_DT >= :V_DATEFORWINDOW);
 
V_START_DATE := (SELECT TO_VARCHAR(DATEADD(DAY, -90, :V_MIN_UCPS_CLM_DT),''YYYYMMDD''));

V_END_DATE :=  (SELECT TO_VARCHAR(DATEADD(DAY, 3, :V_MAX_UCPS_CLM_DT),''YYYYMMDD''));


ALTER SESSION SET TIMEZONE = ''America/Chicago'';



V_STEP := ''STEP1'';
 
V_STEP_NAME := ''LOAD TMP_ISDW_CLMS_FILTERED''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

-- - - - - -  - - - - PROFTAXCPT HQL SCRIPT
-- SNOWFLAKE SCRIPT ADAPTATION

-- TEMPORARY TABLE CREATION FOR ISDW_CLMS_FILTERED
CREATE OR REPLACE TEMPORARY TABLE IDENTIFIER(:V_TMP_ISDW_CLMS_FILTERED) AS
SELECT DB2.*, AMT.*
FROM IDENTIFIER(:V_MED_APPROVED_AMT_STG) AMT
JOIN IDENTIFIER(:V_CH_VIEW) DB2
ON DB2.CLM_NUM = AMT.CLAIM_NUMBER
WHERE DB2.CLM_RECEPT_DT BETWEEN :V_MIN_UCPS_CLM_DT AND :V_MAX_UCPS_CLM_DT;

	V_ROWS_LOADED := (SELECT COUNT(1)  FROM IDENTIFIER(:V_TMP_ISDW_CLMS_FILTERED) ) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   

V_STEP := ''STEP2'';
 
V_STEP_NAME := ''LOAD TMP_CLAIMS''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

-- TEMPORARY TABLE CREATION FOR CLAIMS
CREATE OR REPLACE TEMPORARY TABLE IDENTIFIER(:V_TMP_CLAIMS) AS
SELECT DISTINCT 
    D.CLM_NUM AS UCPS_CLM_NUM, 
    SPLIT_PART(PRODUCT_SERVICE_ID_QLFR, '':'', 1) AS CPT_CODES, 
    CLM.GRP_CONTROL_NO, 
    CLM.TRANCACTSET_CNTL_NO, 
    CLM.TRANSACTSET_CREATE_DATE, 
    CLM.PROVIDER_HL_NO, 
    CLM.SUBSCRIBER_HL_NO, 
    CLM.PAYER_HL_NO, 
    CLM.CLAIM_ID, 
    MEDICARE_APPROVED_AMOUNT AS AMOUNTOFREFERENCE, 
    CLM.SL_SEQ_NUM AS BILL_LINE, 
    ADJ_BEN_AMT, 
    CLAIM_PD_DATE,
    CLM.XML_MD5
FROM 
    IDENTIFIER(:V_PROF_CLAIM_PART) CLM
    INNER JOIN IDENTIFIER(:V_PROF_SUBSCRIBER) MEM 
        ON MEM.GRP_CONTROL_NO = CLM.GRP_CONTROL_NO
        AND MEM.TRANCACTSET_CNTL_NO = CLM.TRANCACTSET_CNTL_NO
        AND MEM.SUBSCRIBER_HL_NO = CLM.SUBSCRIBER_HL_NO
        AND MEM.TRANSACTSET_CREATE_DATE = CLM.TRANSACTSET_CREATE_DATE
        AND MEM.XML_MD5 = CLM.XML_MD5
    INNER JOIN IDENTIFIER(:V_TMP_ISDW_CLMS_FILTERED) D 
        ON CLM.PAYER_CLM_CTRL_NUM = D.MEDICARE_CLM_CNTRL_NUM
        AND CLM.SL_SEQ_NUM = D.BILL_LINE_NUMBER
        AND MEM.SUBSCRIBER_ID = D.MEMBER_ID
WHERE 
    CLM.TRANSACTSET_CREATE_DATE BETWEEN :V_START_DATE AND :V_END_DATE
    AND D.MEDICARE_CLM_CNTRL_NUM IS NOT NULL 
    AND CLM.VENDOR_CD = ''CMS''

UNION ALL

SELECT DISTINCT 
    D.CLM_NUM AS UCPS_CLM_NUM, 
    SPLIT_PART(PRODUCT_SERVICE_ID_QLFR, '':'', 1) AS CPT_CODES, 
    CLM.GRP_CONTROL_NO, 
    CLM.TRANCACTSET_CNTL_NO, 
    CLM.TRANSACTSET_CREATE_DATE, 
    CLM.PROVIDER_HL_NO, 
    CLM.SUBSCRIBER_HL_NO, 
    CLM.PAYER_HL_NO, 
    CLM.CLAIM_ID, 
    MEDICARE_APPROVED_AMOUNT AS AMOUNTOFREFERENCE, 
    CLM.SL_SEQ_NUM AS BILL_LINE, 
    ADJ_BEN_AMT, 
    CLAIM_PD_DATE,
    CLM.XML_MD5
FROM 
    IDENTIFIER(:V_PROF_CLAIM_PART) CLM
    INNER JOIN IDENTIFIER(:V_TMP_ISDW_CLMS_FILTERED) D 
        ON CLM.NETWORK_TRACE_NUMBER = D.CLH_TRK_ID
        AND CLM.SL_SEQ_NUM = D.BILL_LINE_NUMBER
WHERE 
    CLM.TRANSACTSET_CREATE_DATE BETWEEN :V_START_DATE AND :V_END_DATE
    AND D.CLH_TRK_ID IS NOT NULL 
    AND CLM.VENDOR_CD = ''CH'';
	
	V_ROWS_LOADED := (SELECT COUNT(1)  FROM IDENTIFIER(:V_TMP_CLAIMS) ) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   
								 
								 
V_STEP := ''STEP3'';
 
V_STEP_NAME := ''LOAD TMP_PROVIDERS''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

-- TEMPORARY TABLE CREATION FOR PROVIDERS
CREATE OR REPLACE TEMPORARY TABLE IDENTIFIER(:V_TMP_PROVIDERS) AS
 select  a.TAXONOMY_CODES,
         a.GRP_CONTROL_NO,
    a.TRANCACTSET_CNTL_NO, 
    a.TRANSACTSET_CREATE_DATE, 
    a.PROVIDER_HL_NO, 
    a.SUBSCRIBER_HL_NO, 
    a.PAYER_HL_NO, 
    a.CLAIM_ID,
    PROVIDER_TAX_ID,
    SL_SEQ_NUM,
    a.XML_MD5,
    CASE
        WHEN LENGTH(a.PRV_ID) > 0 THEN a.PRV_ID
        ELSE PROVIDER_ID
    END AS PROVIDERIDS
    FROM 
    (select GET(element.value,''prv_speciality_tax_code''):: varchar AS TAXONOMY_CODES,
    GET(element.value,''prv_id''):: varchar as PRV_ID,
    *
	from IDENTIFIER(:V_PROF_PROVIDER_ALL) prof_p_all,
	LATERAL FLATTEN(to_array(prof_p_all.clm_rendering_prv_map)) element) a
    JOIN IDENTIFIER(:V_PROF_PROVIDER) BILLPROVIDER
        ON (a.GRP_CONTROL_NO = BILLPROVIDER.GRP_CONTROL_NO
        AND a.TRANCACTSET_CNTL_NO = BILLPROVIDER.TRANCACTSET_CNTL_NO
        AND a.TRANSACTSET_CREATE_DATE = BILLPROVIDER.TRANSACTSET_CREATE_DATE
        AND a.PROVIDER_HL_NO = BILLPROVIDER.PROVIDER_HL_NO
        AND a.XML_MD5 = BILLPROVIDER.XML_MD5)
        WHERE 
    a.TRANSACTSET_CREATE_DATE BETWEEN :V_START_DATE AND :V_END_DATE
    AND BILLPROVIDER.TRANSACTSET_CREATE_DATE BETWEEN :V_START_DATE AND :V_END_DATE;
		
	V_ROWS_LOADED := (SELECT COUNT(1)  FROM IDENTIFIER(:V_TMP_PROVIDERS)) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);   
								 
	
V_STEP := ''STEP4'';
 
V_STEP_NAME := ''LOAD TMP_TAXONOMY_MISMATCH_RAW''; 
   
V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());	

-- FINAL INSERT STATEMENT
create or replace temporary table IDENTIFIER(:V_TMP_TAXONOMY_MISMATCH_RAW)
as
SELECT DISTINCT 
    UCPS_CLM_NUM, 
    BILL_LINE, 
    CPT_CODES, 
    AMOUNTOFREFERENCE, 
    TAXONOMY_CODES, 
    PROVIDER_TAX_ID, 
    PROVIDERIDS, 
    ADJ_BEN_AMT, 
    CLAIM_PD_DATE
FROM 
    IDENTIFIER(:V_TMP_CLAIMS) AS CLAIMS
    JOIN IDENTIFIER(:V_TMP_PROVIDERS) AS PROVIDERS 
        ON CLAIMS.GRP_CONTROL_NO = PROVIDERS.GRP_CONTROL_NO
        AND CLAIMS.TRANCACTSET_CNTL_NO = PROVIDERS.TRANCACTSET_CNTL_NO
        AND CLAIMS.TRANSACTSET_CREATE_DATE = PROVIDERS.TRANSACTSET_CREATE_DATE
        AND CLAIMS.PROVIDER_HL_NO  = PROVIDERS.PROVIDER_HL_NO
        AND CLAIMS.SUBSCRIBER_HL_NO = PROVIDERS.SUBSCRIBER_HL_NO
        AND CLAIMS.PAYER_HL_NO = PROVIDERS.PAYER_HL_NO
        AND CLAIMS.CLAIM_ID = PROVIDERS.CLAIM_ID
        AND CLAIMS.XML_MD5 = PROVIDERS.XML_MD5;

INSERT INTO IDENTIFIER(:V_TAXONOMY_MISMATCH_RAW) (UCPS_CLM_NUM,	   
BILL_LINE,	       
CPT_CODES,	       
MED_APPROVED_AMOUNT,
TAXONOMY_CODES	   ,
PROVIDER_TAX_ID	   ,
PROVIDER_NPI	   ,
ADJ_BEN_AMT	       ,
CLAIM_PD_DATE	   ,
ISDC_CREATED_DT	   ,
ISDC_UPDATED_DT
) Select  UCPS_CLM_NUM, 
    BILL_LINE, 
    CPT_CODES, 
    AMOUNTOFREFERENCE, 
    TAXONOMY_CODES, 
    PROVIDER_TAX_ID, 
    PROVIDERIDS, 
    ADJ_BEN_AMT, 
    CLAIM_PD_DATE,
    CURRENT_TIMESTAMP(),
    CURRENT_TIMESTAMP() from IDENTIFIER(:V_TMP_TAXONOMY_MISMATCH_RAW);


V_ROWS_LOADED := (SELECT COUNT(1)  FROM IDENTIFIER(:V_TMP_TAXONOMY_MISMATCH_RAW) ) ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, :V_MESSAGE, NULL, NULL);       


   V_STEP := ''STEP5'';
   
   V_STEP_NAME := ''Create File'';
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

V_STAGE_QUERY := ''COPY INTO ''||:STAGE_NAME||''/pre_clm/outbox/taxonomy/''||''prof_taxonomy_report_''||(SELECT TO_VARCHAR(DATEADD(MONTH, -1, DATE_TRUNC(MONTH,:V_CURRENT_DATE)), ''YYYYMM''))||''.txt''||'' FROM (
             SELECT *
               FROM TMP_TAXONOMY_MISMATCH_RAW
               )
file_format = (type = ''''CSV'''' 
               field_delimiter = ''''~''''
               compression = ''''gzip'''' 
               empty_field_as_null=false
               NULL_IF = ''''()''''
              )
HEADER = True
OVERWRITE = True
MAX_FILE_SIZE = 4900000000
SINGLE = True''
;

execute immediate ''USE SCHEMA ''||:TGT_SC;                                  
execute immediate  :V_STAGE_QUERY;  

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   
  
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, NULL, NULL, :V_MESSAGE, NULL, NULL);                                     
                                 

EXCEPTION

WHEN OTHER THEN

CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'', :PIPELINE_ID, :PIPELINE_NAME,  :V_PROCESS_NAME, :V_SUB_PROCESS_NAME,
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''FAILED'', :V_LAST_QUERY_ID, NULL, NULL, :SQLERRM, :SQLCODE, :SQLSTATE);



RAISE;

END;

';
