USE SCHEMA SRC_EDI_837;

CREATE OR REPLACE PROCEDURE "SP_INST_SUBMITTER_NAME"("PIPELINE_ID" VARCHAR(16777216), "PIPELINE_NAME" VARCHAR(16777216), "DB_NAME" VARCHAR(16777216), "UTIL_SC" VARCHAR(16777216), "TGT_SC" VARCHAR(16777216), "SRC_EDI_837_SC" VARCHAR(16777216), "FILE_SOURCE" VARCHAR(16777216), "LAST_SUCCESSFUL_LOAD" VARCHAR(16777216), "WH" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS '
DECLARE


V_SP_PROCESS_RUN_LOGS_DTL  VARCHAR := :DB_NAME||''.''||COALESCE(:UTIL_SC, ''UTIL'')||''.SP_PROCESS_RUN_LOGS_DTL'';

V_PROGRAM_LIST  VARCHAR := :DB_NAME||''.''||COALESCE(:UTIL_SC, ''UTIL'')||''.PROGRAM_LIST'';

V_PROCESS_NAME     VARCHAR := ''EDI_''||UPPER(:FILE_SOURCE)||''_LOADER''; 

V_SUB_PROCESS_NAME VARCHAR DEFAULT ''INST_SUBMITTER_NAME'';

V_STEP             VARCHAR;

V_STEP_NAME        VARCHAR;

V_START_TIME       VARCHAR;

V_END_TIME         VARCHAR;

V_ROWS_PARSED       INTEGER;

V_ROWS_LOADED       INTEGER;

V_MESSAGE          VARCHAR;

V_LAST_QUERY_ID    VARCHAR;

V_INST_CLAIMS_RAW   VARCHAR := :DB_NAME||''.''||COALESCE(:SRC_EDI_837_SC, ''SRC_EDI_837'')||''.INST_CLAIMS_RAW'';

V_INST_SUBMITTER_NAME VARCHAR := :DB_NAME||''.''||COALESCE(:TGT_SC, ''SRC_EDI_837'')||''.INST_SUBMITTER_NAME'';



BEGIN

ALTER SESSION SET TIMEZONE = ''America/Chicago'';

   V_STEP := ''STEP1'';
   
   V_STEP_NAME := ''LOAD INST_SUBMITTER_NAME'';
   
   V_START_TIME := CONVERT_TIMEZONE(''America/Chicago'', CURRENT_TIMESTAMP());

EXECUTE IMMEDIATE ''USE WAREHOUSE ''||:WH; 
   
   V_ROWS_PARSED  := (SELECT COUNT(1) FROM IDENTIFIER(:V_INST_CLAIMS_RAW) WHERE FILE_SOURCE = :FILE_SOURCE AND ISDC_LOAD_DT >= :LAST_SUCCESSFUL_LOAD );

   
INSERT INTO IDENTIFIER(:V_INST_SUBMITTER_NAME)

 (	
  APP_SENDER_CODE , 
  APP_RECIEVER_CODE , 
  GRP_CONTROL_NO , 
  TRANCACTSET_CNTL_NO , 
  IMPL_CONVENTION_REFER , 
  TRANSACTSET_PURPOSE_CODE , 
  BATCH_CNTL_NO , 
  TRANSACTSET_CREATE_TIME , 
  TRANSACT_TYPE_CODE , 
  SUBMITTER_TYPE , 
  SUBMITTER_NAME , 
  SUBMITTER_NAME_FIRST , 
  SUBMITTER_NAME_MIDDLE , 
  NAME_PREFIX , 
  NAME_SUFFIX , 
  SUBMITTER_ID , 
  SUBMITTER_CONTACT_NAME , 
  SUBMITTER_CONTACT_TYPE , 
  SUBMITTER_CONTACT_NO ,
  TRANSACTSET_CREATE_DATE , 
  XML_HDR_MD5 ,
  FILE_SOURCE ,
  FILE_NAME
 )


WITH 
RAW AS (SELECT * FROM IDENTIFIER(:V_INST_CLAIMS_RAW) WHERE FILE_SOURCE = :FILE_SOURCE AND ISDC_LOAD_DT >= :LAST_SUCCESSFUL_LOAD
   QUALIFY ROW_NUMBER() OVER  (PARTITION BY XML_MD5 ORDER BY 1) = 1
   )
,

SEGMENTS as (
SELECT  XML_MD5, value as XML, SUBSTR(VALUE, 2, regexp_instr(VALUE, ''>'')-2) AS SEGMENT, FILE_SOURCE, FILE_NAME
FROM
RAW P,
LATERAL FLATTEN(P.xml:"$") 
)
,
claimTrackingId AS (
SELECT 
XML_MD5, replace( GET( XML, ''$''), ''\\"'','''') AS claimTrackingId, FILE_SOURCE, FILE_NAME
FROM SEGMENTS
WHERE SEGMENT = ''claimTrackingId''
)
,

GS AS (
SELECT 
XML_MD5, 
XMLGET( XML,''appSenderCode''):"$"::VARCHAR  AS app_sender_code,
XMLGET( XML,''appReceiverCode''):"$"::VARCHAR  AS app_reciever_code,
XMLGET( XML,''grpControlNumber''):"$"::INTEGER  AS grp_control_no

FROM SEGMENTS
WHERE SEGMENT = ''GS''
)
,

ST AS (
SELECT 
XML_MD5, 
XMLGET( XML,''transactSetControlNumber''):"$"::VARCHAR  As trancactset_cntl_no,
XMLGET( XML,''implConventionRefer''):"$"::VARCHAR  As impl_convention_refer
FROM SEGMENTS
WHERE SEGMENT = ''ST''
)
,

BHT AS 
(
SELECT 
XML_MD5, 
XMLGET( XML,''transactSetPurposeCode''):"$"::INTEGER  As transactset_purpose_code,
XMLGET( XML,''batchControlNumber''):"$"::VARCHAR  As batch_cntl_no,
XMLGET( XML,''transactSetCreateDate''):"$"::VARCHAR  As transactset_create_date,
XMLGET( XML,''transactSetCreateTime''):"$"::INTEGER  As transactset_create_time,
XMLGET( XML,''transactTypeCode''):"$"::VARCHAR  As transact_type_code
FROM SEGMENTS
WHERE SEGMENT = ''BHT''
)
,

Loop1000A_NM1 AS 
(
SELECT 
XML_MD5,  
XMLGET( NM1.value , ''submitterTypeQlfr'' ):"$"::INTEGER  As submitter_type,
XMLGET( NM1.value , ''submitterNameLast'' ):"$"::VARCHAR  As submitter_name,
XMLGET( NM1.value , ''submitterNameFirst'' ):"$"::VARCHAR  As submitter_name_first,
XMLGET( NM1.value , ''submitterNameMiddle'' ):"$"::VARCHAR  As submitter_name_middle,
XMLGET( NM1.value , ''submitterId'' ):"$"::VARCHAR  As submitter_id
FROM SEGMENTS, LATERAL FLATTEN(to_array(GET(xml,''$''))) NM1
WHERE SEGMENT = ''Loop1000A''
AND GET(NM1.value, ''@'') = ''NM1'' 
)
,

Loop1000A_PER_1 AS 
(
SELECT 
XML_MD5, 

 XMLGET( PER_A.value, ''submitterContactName'' ):"$"::VARCHAR  As submitterContactName,
    SUBSTR(GET(PER_B.VALUE, ''@''),  1, LEN(GET(PER_B.VALUE, ''@''))-1) AS key,
    SUBSTR(GET(PER_B.VALUE, ''@''),  -1, 1) AS grp,
   GET(PER_B.VALUE, ''$'')::VARCHAR  as value
    FROM SEGMENTS , LATERAL FLATTEN(to_array(GET(xml,''$''))) PER, LATERAL FLATTEN(to_array(GET(PER.value,''$''))) PER_A  , LATERAL FLATTEN(to_array(GET(PER_A.value,''$''))) PER_B
WHERE SEGMENT = ''Loop1000A''
and GET(PER.value, ''@'') = ''PER''
and PER_B.INDEX in (1,2,3,4,5,6)
)
,

Loop1000A_PER (XML_MD5, submitter_contact_name,  submitter_contact_type, submitter_contact_no)
as 
(
 
SELECT *  exclude grp FROM Loop1000A_PER_1
PIVOT( MAX (VALUE) FOR KEY IN (''submitterContactType'', ''submitterContactNumber''))  
)
,
TEMP 
AS
(

SELECT 

DISTINCT

GS.APP_SENDER_CODE,
GS.APP_RECIEVER_CODE,
GS.GRP_CONTROL_NO,
-------------
ST.TRANCACTSET_CNTL_NO,
ST.IMPL_CONVENTION_REFER,
-------------
BHT.TRANSACTSET_PURPOSE_CODE,
BHT.BATCH_CNTL_NO,

BHT.TRANSACTSET_CREATE_TIME,
BHT.TRANSACT_TYPE_CODE,
-------------


Loop1000A_NM1.SUBMITTER_TYPE,
Loop1000A_NM1.SUBMITTER_NAME,
Loop1000A_NM1.SUBMITTER_NAME_FIRST,
Loop1000A_NM1.SUBMITTER_NAME_MIDDLE,
null as NAME_PREFIX,
null as NAME_SUFFIX,
Loop1000A_NM1.SUBMITTER_ID,
-------------
  
Loop1000A_PER.SUBMITTER_CONTACT_NAME,
Loop1000A_PER.SUBMITTER_CONTACT_TYPE,
Loop1000A_PER.SUBMITTER_CONTACT_NO,

BHT.TRANSACTSET_CREATE_DATE,
  
MD5(GS.APP_SENDER_CODE||GS.APP_RECIEVER_CODE||GS.GRP_CONTROL_NO||ST.TRANCACTSET_CNTL_NO||ST.IMPL_CONVENTION_REFER
    ||BHT.TRANSACTSET_PURPOSE_CODE||BHT.BATCH_CNTL_NO||BHT.TRANSACTSET_CREATE_DATE||BHT.TRANSACTSET_CREATE_TIME||BHT.TRANSACT_TYPE_CODE) AS XML_HDR_MD5,
  
claimTrackingId.FILE_SOURCE, 
claimTrackingId.FILE_NAME
  

FROM claimTrackingId 
     INNER JOIN GS ON claimTrackingId.XML_MD5 = GS.XML_MD5
     INNER JOIN ST ON GS.XML_MD5 = ST.XML_MD5 
     INNER JOIN BHT ON GS.XML_MD5 = BHT.XML_MD5
     LEFT JOIN Loop1000A_NM1 ON GS.XML_MD5 = Loop1000A_NM1.XML_MD5
     LEFT JOIN Loop1000A_PER ON GS.XML_MD5 = Loop1000A_PER.XML_MD5
)

SELECT * FROM TEMP WHERE NOT EXISTS (SELECT 1 FROM IDENTIFIER(:V_INST_SUBMITTER_NAME) P WHERE P.XML_HDR_MD5 = TEMP.XML_HDR_MD5)

;

V_ROWS_LOADED := SQLROWCOUNT ;

V_LAST_QUERY_ID := (SELECT LAST_QUERY_ID(-1)) ;
   

   
CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'',  :PIPELINE_ID, :PIPELINE_NAME, :V_PROCESS_NAME, :V_SUB_PROCESS_NAME, 
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''SUCCESS'', :V_LAST_QUERY_ID, :V_ROWS_PARSED, :V_ROWS_LOADED, NULL, NULL, NULL);


UPDATE IDENTIFIER(:V_PROGRAM_LIST) SET  LAST_SUCCESSFUL_LOAD = :V_START_TIME WHERE  PROCESS_NAME = :V_PROCESS_NAME AND  SUB_PROCESS_NAME = :V_SUB_PROCESS_NAME; 
;




EXCEPTION

WHEN OTHER THEN

CALL IDENTIFIER(:V_SP_PROCESS_RUN_LOGS_DTL) (:DB_NAME, :UTIL_SC, ''PRE_CLM'',  :PIPELINE_ID, :PIPELINE_NAME,  :V_PROCESS_NAME, :V_SUB_PROCESS_NAME,
                                 :V_STEP, :V_STEP_NAME, :V_START_TIME, CURRENT_TIMESTAMP(), ''FAILED'', :V_LAST_QUERY_ID, NULL, NULL, :SQLERRM, :SQLCODE, :SQLSTATE);


RAISE;

END;

';
